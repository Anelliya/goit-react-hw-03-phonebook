{"ast":null,"code":"var _jsxFileName = \"/home/helen/Documents/Projects/React/goit-react-hw-02-phonebook/src/components/ContactForm.jsx\";\nimport React, { Component } from 'react';\nimport generateUniqueId from 'generate-unique-id';\nimport styles from './styles/PhoneBook.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      number: ''\n    };\n\n    this.handleNewValue = ev => {\n      const {\n        value,\n        name\n      } = ev.target;\n      contactForm.setState({\n        [name]: value\n      });\n    };\n  }\n\n  sendContactToApp(newContact) {\n    this.props.handleSubmit(newContact);\n  }\n\n  showMessage(newContactDate) {\n    alert(`${newContactDate.name} already in contacts`);\n  }\n\n  resetState() {\n    this.setState({\n      name: '',\n      number: ''\n    });\n  }\n\n  createNewContact() {\n    return {\n      id: generateUniqueId(),\n      ...this.state\n    };\n  }\n\n  handleNewContact() {\n    const newContactDate = this.state;\n    const contacts = this.props.contacts;\n    const checkedName = contacts.find(el => el.name.toLowerCase() === newContactDate.name.toLowerCase());\n\n    if (!checkedName) {\n      let newContact = this.createNewContact();\n      this.sendContactToApp(newContact);\n    } else {\n      this.showMessage(newContactDate);\n    }\n\n    this.resetState();\n  }\n\n  render() {\n    const inputNames = this.props.options;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.form,\n      children: [inputNames.map(inputName => /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: [inputName, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: inputName,\n          value: this.state[inputName],\n          onChange: this.handleNewValue,\n          className: styles.input\n        }, inputName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)]\n      }, inputName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleNewContact,\n        disabled: !this.state.name || !this.state.number,\n        className: styles.btn,\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ContactForm;","map":{"version":3,"sources":["/home/helen/Documents/Projects/React/goit-react-hw-02-phonebook/src/components/ContactForm.jsx"],"names":["React","Component","generateUniqueId","styles","ContactForm","state","name","number","handleNewValue","ev","value","target","contactForm","setState","sendContactToApp","newContact","props","handleSubmit","showMessage","newContactDate","alert","resetState","createNewContact","id","handleNewContact","contacts","checkedName","find","el","toLowerCase","render","inputNames","options","form","map","inputName","label","input","btn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAGA,OAAOC,MAAP,MAAmB,+BAAnB;;;AAEA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEhCI,KAFgC,GAExB;AACJC,MAAAA,IAAI,EAAE,EADF;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KAFwB;;AAAA,SA6BhCC,cA7BgC,GA6BdC,EAAD,IAAQ;AACrB,YAAM;AAAEC,QAAAA,KAAF;AAASJ,QAAAA;AAAT,UAAkBG,EAAE,CAACE,MAA3B;AACAC,MAAAA,WAAW,CAACC,QAAZ,CAAqB;AACjB,SAACP,IAAD,GAAQI;AADS,OAArB;AAGH,KAlC+B;AAAA;;AAOhCI,EAAAA,gBAAgB,CAACC,UAAD,EAAa;AACzB,SAAKC,KAAL,CAAWC,YAAX,CAAwBF,UAAxB;AACH;;AAEDG,EAAAA,WAAW,CAACC,cAAD,EAAiB;AACxBC,IAAAA,KAAK,CAAE,GAAED,cAAc,CAACb,IAAK,sBAAxB,CAAL;AACH;;AAEDe,EAAAA,UAAU,GAAG;AACT,SAAKR,QAAL,CAAc;AACVP,MAAAA,IAAI,EAAE,EADI;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAAd;AAIH;;AAEDe,EAAAA,gBAAgB,GAAG;AACf,WAAO;AACHC,MAAAA,EAAE,EAAErB,gBAAgB,EADjB;AAEH,SAAG,KAAKG;AAFL,KAAP;AAIH;;AASDmB,EAAAA,gBAAgB,GAAG;AACf,UAAML,cAAc,GAAG,KAAKd,KAA5B;AACA,UAAMoB,QAAQ,GAAG,KAAKT,KAAL,CAAWS,QAA5B;AACA,UAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAT,CAAcC,EAAE,IAAIA,EAAE,CAACtB,IAAH,CAAQuB,WAAR,OAA0BV,cAAc,CAACb,IAAf,CAAoBuB,WAApB,EAA9C,CAApB;;AAEA,QAAI,CAACH,WAAL,EAAkB;AACd,UAAIX,UAAU,GAAG,KAAKO,gBAAL,EAAjB;AACA,WAAKR,gBAAL,CAAsBC,UAAtB;AACH,KAHD,MAGO;AACH,WAAKG,WAAL,CAAiBC,cAAjB;AACH;;AACD,SAAKE,UAAL;AACH;;AAEDS,EAAAA,MAAM,GAAG;AACL,UAAMC,UAAU,GAAG,KAAKf,KAAL,CAAWgB,OAA9B;AAEA,wBACI;AAAM,MAAA,SAAS,EAAE7B,MAAM,CAAC8B,IAAxB;AAAA,iBACKF,UAAU,CAACG,GAAX,CAAeC,SAAS,iBACrB;AAAuB,QAAA,SAAS,EAAEhC,MAAM,CAACiC,KAAzC;AAAA,mBACKD,SADL,eAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmC,UAAA,IAAI,EAAEA,SAAzC;AAAoD,UAAA,KAAK,EAAE,KAAK9B,KAAL,CAAW8B,SAAX,CAA3D;AAAkF,UAAA,QAAQ,EAAE,KAAK3B,cAAjG;AAAiH,UAAA,SAAS,EAAEL,MAAM,CAACkC;AAAnI,WAAwBF,SAAxB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAYA,SAAZ;AAAA;AAAA;AAAA;AAAA,cADH,CADL,eAOI;AAAQ,QAAA,OAAO,EAAE,KAAKX,gBAAtB;AAAwC,QAAA,QAAQ,EAAE,CAAC,KAAKnB,KAAL,CAAWC,IAAZ,IAAoB,CAAC,KAAKD,KAAL,CAAWE,MAAlF;AAA0F,QAAA,SAAS,EAAEJ,MAAM,CAACmC,GAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAhE+B;;AAoEpC,eAAelC,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport generateUniqueId from 'generate-unique-id'\n\n\nimport styles from './styles/PhoneBook.module.css'\n\nclass ContactForm extends Component {\n\n    state = {\n        name: '',\n        number: '',\n    }\n\n    sendContactToApp(newContact) {\n        this.props.handleSubmit(newContact);\n    }\n\n    showMessage(newContactDate) {\n        alert(`${newContactDate.name} already in contacts`);\n    }\n\n    resetState() {\n        this.setState({\n            name: '',\n            number: '',\n        })\n    }\n\n    createNewContact() {\n        return {\n            id: generateUniqueId(),\n            ...this.state,\n        }\n    }\n\n    handleNewValue = (ev) => {\n        const { value, name } = ev.target;\n        contactForm.setState({\n            [name]: value,\n        })\n    }\n\n    handleNewContact() {\n        const newContactDate = this.state;\n        const contacts = this.props.contacts;\n        const checkedName = contacts.find(el => el.name.toLowerCase() === newContactDate.name.toLowerCase())\n\n        if (!checkedName) {\n            let newContact = this.createNewContact();\n            this.sendContactToApp(newContact);\n        } else {\n            this.showMessage(newContactDate);\n        }\n        this.resetState();\n    }\n\n    render() {\n        const inputNames = this.props.options;\n\n        return (\n            <form className={styles.form}>\n                {inputNames.map(inputName => (\n                    <label key={inputName} className={styles.label}>\n                        {inputName}\n                        <input type='text' key={inputName} name={inputName} value={this.state[inputName]} onChange={this.handleNewValue} className={styles.input} />\n                    </label>\n                ))}\n                <button onClick={this.handleNewContact} disabled={!this.state.name || !this.state.number} className={styles.btn}>Add contact</button>\n            </form >\n        )\n    }\n\n}\n\nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}