{"ast":null,"code":"var _jsxFileName = \"/home/helen/Documents/Projects/React/goit-react-hw-03-phonebook/src/components/ContactForm.jsx\";\nimport React, { Component } from 'react';\nimport generateUniqueId from 'generate-unique-id';\nimport styles from './styles/PhoneBook.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  name: '',\n  number: ''\n};\n\nclass ContactForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = INITIAL_STATE;\n\n    this.handleNewValue = ({\n      value,\n      name\n    }) => {\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleNewContact = () => {\n      const newContactDate = this.state;\n      const contacts = this.props.contacts;\n      const checkedName = contacts.find(el => el.name.toLowerCase() === newContactDate.name.toLowerCase());\n\n      if (!checkedName) {\n        let newContact = this.createNewContact();\n        this.sendContactToApp(newContact);\n      } else {\n        this.showMessage(newContactDate);\n      }\n\n      this.resetState();\n    };\n  }\n\n  sendContactToApp(newContact) {\n    this.props.handleSubmit(newContact);\n  }\n\n  showMessage(newContactDate) {\n    alert(`${newContactDate.name} already in contacts`);\n  }\n\n  resetState() {\n    this.setState(INITIAL_STATE);\n  }\n\n  createNewContact() {\n    return {\n      id: generateUniqueId(),\n      ...this.state\n    };\n  }\n\n  render() {\n    const inputNames = this.props.options;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.form,\n      children: [inputNames.map(inputName => /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: [inputName, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: inputName,\n          value: this.state[inputName],\n          onChange: this.handleNewValue,\n          className: styles.input\n        }, inputName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this)]\n      }, inputName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleNewContact,\n        disabled: !this.state.name || !this.state.number,\n        className: styles.btn,\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ContactForm;","map":{"version":3,"sources":["/home/helen/Documents/Projects/React/goit-react-hw-03-phonebook/src/components/ContactForm.jsx"],"names":["React","Component","generateUniqueId","styles","INITIAL_STATE","name","number","ContactForm","state","handleNewValue","value","setState","handleNewContact","newContactDate","contacts","props","checkedName","find","el","toLowerCase","newContact","createNewContact","sendContactToApp","showMessage","resetState","handleSubmit","alert","id","render","inputNames","options","form","map","inputName","label","input","btn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAGA,OAAOC,MAAP,MAAmB,+BAAnB;;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAAtB;;AAKA,MAAMC,WAAN,SAA0BN,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEhCO,KAFgC,GAExBJ,aAFwB;;AAAA,SAuBhCK,cAvBgC,GAuBf,CAAC;AAAEC,MAAAA,KAAF;AAASL,MAAAA;AAAT,KAAD,KAAqB;AAClC,WAAKM,QAAL,CAAc;AACV,SAACN,IAAD,GAAQK;AADE,OAAd;AAGH,KA3B+B;;AAAA,SA6BhCE,gBA7BgC,GA6Bb,MAAM;AACrB,YAAMC,cAAc,GAAG,KAAKL,KAA5B;AACA,YAAMM,QAAQ,GAAG,KAAKC,KAAL,CAAWD,QAA5B;AACA,YAAME,WAAW,GAAGF,QAAQ,CAACG,IAAT,CAAcC,EAAE,IAAIA,EAAE,CAACb,IAAH,CAAQc,WAAR,OAA0BN,cAAc,CAACR,IAAf,CAAoBc,WAApB,EAA9C,CAApB;;AAEA,UAAI,CAACH,WAAL,EAAkB;AACd,YAAII,UAAU,GAAG,KAAKC,gBAAL,EAAjB;AACA,aAAKC,gBAAL,CAAsBF,UAAtB;AACH,OAHD,MAGO;AACH,aAAKG,WAAL,CAAiBV,cAAjB;AACH;;AACD,WAAKW,UAAL;AACH,KAzC+B;AAAA;;AAIhCF,EAAAA,gBAAgB,CAACF,UAAD,EAAa;AACzB,SAAKL,KAAL,CAAWU,YAAX,CAAwBL,UAAxB;AACH;;AAEDG,EAAAA,WAAW,CAACV,cAAD,EAAiB;AACxBa,IAAAA,KAAK,CAAE,GAAEb,cAAc,CAACR,IAAK,sBAAxB,CAAL;AACH;;AAEDmB,EAAAA,UAAU,GAAG;AACT,SAAKb,QAAL,CAAcP,aAAd;AACH;;AAEDiB,EAAAA,gBAAgB,GAAG;AACf,WAAO;AACHM,MAAAA,EAAE,EAAEzB,gBAAgB,EADjB;AAEH,SAAG,KAAKM;AAFL,KAAP;AAIH;;AAsBDoB,EAAAA,MAAM,GAAG;AACL,UAAMC,UAAU,GAAG,KAAKd,KAAL,CAAWe,OAA9B;AAEA,wBACI;AAAM,MAAA,SAAS,EAAE3B,MAAM,CAAC4B,IAAxB;AAAA,iBACKF,UAAU,CAACG,GAAX,CAAeC,SAAS,iBACrB;AAAuB,QAAA,SAAS,EAAE9B,MAAM,CAAC+B,KAAzC;AAAA,mBACKD,SADL,eAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmC,UAAA,IAAI,EAAEA,SAAzC;AAAoD,UAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWyB,SAAX,CAA3D;AAAkF,UAAA,QAAQ,EAAE,KAAKxB,cAAjG;AAAiH,UAAA,SAAS,EAAEN,MAAM,CAACgC;AAAnI,WAAwBF,SAAxB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAYA,SAAZ;AAAA;AAAA;AAAA;AAAA,cADH,CADL,eAOI;AAAQ,QAAA,OAAO,EAAE,KAAKrB,gBAAtB;AAAwC,QAAA,QAAQ,EAAE,CAAC,KAAKJ,KAAL,CAAWH,IAAZ,IAAoB,CAAC,KAAKG,KAAL,CAAWF,MAAlF;AAA0F,QAAA,SAAS,EAAEH,MAAM,CAACiC,GAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAzD+B;;AA6DpC,eAAe7B,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport generateUniqueId from 'generate-unique-id'\n\n\nimport styles from './styles/PhoneBook.module.css'\n\nconst INITIAL_STATE = {\n    name: '',\n    number: '',\n}\n\nclass ContactForm extends Component {\n\n    state = INITIAL_STATE;\n\n    sendContactToApp(newContact) {\n        this.props.handleSubmit(newContact);\n    }\n\n    showMessage(newContactDate) {\n        alert(`${newContactDate.name} already in contacts`);\n    }\n\n    resetState() {\n        this.setState(INITIAL_STATE)\n    }\n\n    createNewContact() {\n        return {\n            id: generateUniqueId(),\n            ...this.state,\n        }\n    }\n\n    handleNewValue = ({ value, name }) => {\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    handleNewContact = () => {\n        const newContactDate = this.state;\n        const contacts = this.props.contacts;\n        const checkedName = contacts.find(el => el.name.toLowerCase() === newContactDate.name.toLowerCase())\n\n        if (!checkedName) {\n            let newContact = this.createNewContact();\n            this.sendContactToApp(newContact);\n        } else {\n            this.showMessage(newContactDate);\n        }\n        this.resetState();\n    }\n\n    render() {\n        const inputNames = this.props.options;\n\n        return (\n            <form className={styles.form}>\n                {inputNames.map(inputName => (\n                    <label key={inputName} className={styles.label}>\n                        {inputName}\n                        <input type='text' key={inputName} name={inputName} value={this.state[inputName]} onChange={this.handleNewValue} className={styles.input} />\n                    </label>\n                ))}\n                <button onClick={this.handleNewContact} disabled={!this.state.name || !this.state.number} className={styles.btn}>Add contact</button>\n            </form >\n        )\n    }\n\n}\n\nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}