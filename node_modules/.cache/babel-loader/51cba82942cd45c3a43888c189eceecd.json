{"ast":null,"code":"var _jsxFileName = \"/home/helen/Documents/Projects/React/2hw/src/components/Statistics/Statistics.jsx\";\nimport React, { Component } from 'react';\nimport Feedback from './Feedback';\nimport Total from './Total';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Statistics extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n      total: 0,\n      persentage: 0\n    };\n\n    this.heandleGoodFeedback = good => {\n      console.log(good);\n      this.setState(prevState => ({\n        good: prevState.good + 1\n      }));\n      this.countTotalFeedback(good);\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.heandleNeutralFeedback = () => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1,\n        total: prevState.total + 1\n      }));\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.heandleBadFeedback = () => {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1,\n        total: prevState.total + 1\n      }));\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.countTotalFeedback = count => {\n      this.setState(prevState => ({\n        total: prevState.total + count\n      }));\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      this.setState(state => {\n        return {\n          persentage: state.good * 100 / state.total\n        };\n      });\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad,\n      total,\n      persentage\n    } = this.state;\n    const persentageOfFeedback = persentage.toFixed(1);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Feedback, {\n        heandleGoodFeedback: () => this.heandleGoodFeedback(good),\n        heandleBadFeedback: this.heandleBadFeedback,\n        heandleNeutralFeedback: this.heandleNeutralFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Total, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: total,\n        positiveFeedback: persentageOfFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/helen/Documents/Projects/React/2hw/src/components/Statistics/Statistics.jsx"],"names":["React","Component","Feedback","Total","Statistics","state","good","neutral","bad","total","persentage","heandleGoodFeedback","console","log","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","heandleNeutralFeedback","heandleBadFeedback","count","render","persentageOfFeedback","toFixed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAE/BI,KAF+B,GAEvB;AACJC,MAAAA,IAAI,EAAE,CADF;AAEJC,MAAAA,OAAO,EAAE,CAFL;AAGJC,MAAAA,GAAG,EAAE,CAHD;AAIJC,MAAAA,KAAK,EAAE,CAJH;AAKJC,MAAAA,UAAU,EAAE;AALR,KAFuB;;AAAA,SAc/BC,mBAd+B,GAcRL,IAAD,IAAU;AAC5BM,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACA,WAAKQ,QAAL,CAAcC,SAAS,KAAK;AACxBT,QAAAA,IAAI,EAAES,SAAS,CAACT,IAAV,GAAiB;AADC,OAAL,CAAvB;AAGA,WAAKU,kBAAL,CAAwBV,IAAxB;AACA,WAAKW,+BAAL;AACH,KArB8B;;AAAA,SAuB/BC,sBAvB+B,GAuBN,MAAM;AAC3B,WAAKJ,QAAL,CAAcC,SAAS,KAAK;AACxBR,QAAAA,OAAO,EAAEQ,SAAS,CAACR,OAAV,GAAoB,CADL;AAExBE,QAAAA,KAAK,EAAEM,SAAS,CAACN,KAAV,GAAkB;AAFD,OAAL,CAAvB;AAKA,WAAKQ,+BAAL;AAEH,KA/B8B;;AAAA,SAgC/BE,kBAhC+B,GAgCV,MAAM;AACvB,WAAKL,QAAL,CAAcC,SAAS,KAAK;AACxBP,QAAAA,GAAG,EAAEO,SAAS,CAACP,GAAV,GAAgB,CADG;AAExBC,QAAAA,KAAK,EAAEM,SAAS,CAACN,KAAV,GAAkB;AAFD,OAAL,CAAvB;AAKA,WAAKQ,+BAAL;AAEH,KAxC8B;;AAAA,SA0C/BD,kBA1C+B,GA0CTI,KAAD,IAAW;AAC5B,WAAKN,QAAL,CAAcC,SAAS,KAAK;AACxBN,QAAAA,KAAK,EAAEM,SAAS,CAACN,KAAV,GAAkBW;AADD,OAAL,CAAvB;AAGH,KA9C8B;;AAAA,SAgD/BH,+BAhD+B,GAgDG,MAAM;AACpC,WAAKH,QAAL,CAAeT,KAAD,IAAW;AACrB,eAAO;AAAEK,UAAAA,UAAU,EAAEL,KAAK,CAACC,IAAN,GAAa,GAAb,GAAmBD,KAAK,CAACI;AAAvC,SAAP;AACH,OAFD;AAGH,KApD8B;AAAA;;AAsD/BY,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEf,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA,GAAjB;AAAsBC,MAAAA,KAAtB;AAA6BC,MAAAA;AAA7B,QAA4C,KAAKL,KAAvD;AACA,UAAMiB,oBAAoB,GAAGZ,UAAU,CAACa,OAAX,CAAmB,CAAnB,CAA7B;AAEA,wBACI;AAAA,8BACI,QAAC,QAAD;AACI,QAAA,mBAAmB,EAAE,MAAM,KAAKZ,mBAAL,CAAyBL,IAAzB,CAD/B;AAEI,QAAA,kBAAkB,EAAE,KAAKa,kBAF7B;AAGI,QAAA,sBAAsB,EAAE,KAAKD;AAHjC;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEZ,IAAb;AAAmB,QAAA,OAAO,EAAEC,OAA5B;AAAqC,QAAA,GAAG,EAAEC,GAA1C;AAA+C,QAAA,KAAK,EAAEC,KAAtD;AAA6D,QAAA,gBAAgB,EAAEa;AAA/E;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA,oBADJ;AAUH;;AApE8B;;AAuEnC,eAAelB,UAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport Feedback from './Feedback'\nimport Total from './Total'\n\nclass Statistics extends Component {\n\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n        total: 0,\n        persentage: 0\n    }\n\n\n\n\n\n    heandleGoodFeedback = (good) => {\n        console.log(good)\n        this.setState(prevState => ({\n            good: prevState.good + 1,\n        }))\n        this.countTotalFeedback(good)\n        this.countPositiveFeedbackPercentage()\n    }\n\n    heandleNeutralFeedback = () => {\n        this.setState(prevState => ({\n            neutral: prevState.neutral + 1,\n            total: prevState.total + 1,\n\n        }))\n        this.countPositiveFeedbackPercentage()\n\n    }\n    heandleBadFeedback = () => {\n        this.setState(prevState => ({\n            bad: prevState.bad + 1,\n            total: prevState.total + 1,\n\n        }))\n        this.countPositiveFeedbackPercentage()\n\n    }\n\n    countTotalFeedback = (count) => {\n        this.setState(prevState => ({\n            total: prevState.total + count\n        }))\n    }\n\n    countPositiveFeedbackPercentage = () => {\n        this.setState((state) => {\n            return { persentage: state.good * 100 / state.total }\n        })\n    }\n\n    render() {\n        const { good, neutral, bad, total, persentage } = this.state;\n        const persentageOfFeedback = persentage.toFixed(1);\n\n        return (\n            <>\n                <Feedback\n                    heandleGoodFeedback={() => this.heandleGoodFeedback(good)}\n                    heandleBadFeedback={this.heandleBadFeedback}\n                    heandleNeutralFeedback={this.heandleNeutralFeedback}\n                />\n                <Total good={good} neutral={neutral} bad={bad} total={total} positiveFeedback={persentageOfFeedback} />\n            </>\n        )\n    }\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}