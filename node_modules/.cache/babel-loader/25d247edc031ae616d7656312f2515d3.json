{"ast":null,"code":"import React, { Component } from 'react';\nimport FeedbackOptions from './FeedbackOptions';\nimport Total from './Total';\n\nclass Statistics extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n      total: 0,\n      persentage: 0\n    };\n\n    this.heandleGoodFeedback = () => {\n      this.setState(prevState => ({\n        good: prevState.good + 1\n      }));\n      this.countTotalFeedback();\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.heandleNeutralFeedback = () => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1\n      }));\n      this.countTotalFeedback();\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.heandleBadFeedback = () => {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1\n      }));\n      this.countTotalFeedback();\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.countTotalFeedback = () => {\n      this.setState(prevState => ({\n        total: prevState.total + 1\n      }));\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      this.setState(state => {\n        return {\n          persentage: state.good * 100 / state.total\n        };\n      });\n    };\n  } // render() {\n  //     const { good, neutral, bad, total, persentage } = this.state;\n  //     const persentageOfFeedback = Math.round(persentage);\n  //     return (\n  //         <>\n  //             <FeedbackOptions\n  //                 heandleGoodFeedback={() => this.heandleGoodFeedback(good)}\n  //                 heandleBadFeedback={this.heandleBadFeedback}\n  //                 heandleNeutralFeedback={this.heandleNeutralFeedback}\n  //             />\n  //             <Total good={good} neutral={neutral} bad={bad} total={total} positiveFeedback={persentageOfFeedback} />\n  //         </>\n  //     )\n  // }\n\n\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/helen/Documents/Projects/React/2hw/src/components/Statistics/Statistics.jsx"],"names":["React","Component","FeedbackOptions","Total","Statistics","state","good","neutral","bad","total","persentage","heandleGoodFeedback","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","heandleNeutralFeedback","heandleBadFeedback"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAE/BI,KAF+B,GAEvB;AACJC,MAAAA,IAAI,EAAE,CADF;AAEJC,MAAAA,OAAO,EAAE,CAFL;AAGJC,MAAAA,GAAG,EAAE,CAHD;AAIJC,MAAAA,KAAK,EAAE,CAJH;AAKJC,MAAAA,UAAU,EAAE;AALR,KAFuB;;AAAA,SAU/BC,mBAV+B,GAUT,MAAM;AACxB,WAAKC,QAAL,CAAcC,SAAS,KAAK;AACxBP,QAAAA,IAAI,EAAEO,SAAS,CAACP,IAAV,GAAiB;AADC,OAAL,CAAvB;AAGA,WAAKQ,kBAAL;AACA,WAAKC,+BAAL;AACH,KAhB8B;;AAAA,SAkB/BC,sBAlB+B,GAkBN,MAAM;AAC3B,WAAKJ,QAAL,CAAcC,SAAS,KAAK;AACxBN,QAAAA,OAAO,EAAEM,SAAS,CAACN,OAAV,GAAoB;AADL,OAAL,CAAvB;AAGA,WAAKO,kBAAL;AACA,WAAKC,+BAAL;AAEH,KAzB8B;;AAAA,SA0B/BE,kBA1B+B,GA0BV,MAAM;AACvB,WAAKL,QAAL,CAAcC,SAAS,KAAK;AACxBL,QAAAA,GAAG,EAAEK,SAAS,CAACL,GAAV,GAAgB;AADG,OAAL,CAAvB;AAGA,WAAKM,kBAAL;AACA,WAAKC,+BAAL;AAEH,KAjC8B;;AAAA,SAmC/BD,kBAnC+B,GAmCV,MAAM;AACvB,WAAKF,QAAL,CAAcC,SAAS,KAAK;AACxBJ,QAAAA,KAAK,EAAEI,SAAS,CAACJ,KAAV,GAAkB;AADD,OAAL,CAAvB;AAGH,KAvC8B;;AAAA,SAyC/BM,+BAzC+B,GAyCG,MAAM;AACpC,WAAKH,QAAL,CAAeP,KAAD,IAAW;AACrB,eAAO;AAAEK,UAAAA,UAAU,EAAEL,KAAK,CAACC,IAAN,GAAa,GAAb,GAAmBD,KAAK,CAACI;AAAvC,SAAP;AACH,OAFD;AAGH,KA7C8B;AAAA,IA+C/B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7D+B;;AAgEnC,eAAeL,UAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport FeedbackOptions from './FeedbackOptions'\nimport Total from './Total'\n\nclass Statistics extends Component {\n\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n        total: 0,\n        persentage: 0\n    }\n\n    heandleGoodFeedback = () => {\n        this.setState(prevState => ({\n            good: prevState.good + 1,\n        }))\n        this.countTotalFeedback()\n        this.countPositiveFeedbackPercentage()\n    }\n\n    heandleNeutralFeedback = () => {\n        this.setState(prevState => ({\n            neutral: prevState.neutral + 1,\n        }))\n        this.countTotalFeedback()\n        this.countPositiveFeedbackPercentage()\n\n    }\n    heandleBadFeedback = () => {\n        this.setState(prevState => ({\n            bad: prevState.bad + 1,\n        }))\n        this.countTotalFeedback()\n        this.countPositiveFeedbackPercentage()\n\n    }\n\n    countTotalFeedback = () => {\n        this.setState(prevState => ({\n            total: prevState.total + 1\n        }))\n    }\n\n    countPositiveFeedbackPercentage = () => {\n        this.setState((state) => {\n            return { persentage: state.good * 100 / state.total }\n        })\n    }\n\n    // render() {\n    //     const { good, neutral, bad, total, persentage } = this.state;\n    //     const persentageOfFeedback = Math.round(persentage);\n\n    //     return (\n    //         <>\n    //             <FeedbackOptions\n    //                 heandleGoodFeedback={() => this.heandleGoodFeedback(good)}\n    //                 heandleBadFeedback={this.heandleBadFeedback}\n    //                 heandleNeutralFeedback={this.heandleNeutralFeedback}\n    //             />\n    //             <Total good={good} neutral={neutral} bad={bad} total={total} positiveFeedback={persentageOfFeedback} />\n    //         </>\n    //     )\n    // }\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}