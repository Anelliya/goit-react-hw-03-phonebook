{"ast":null,"code":"var _jsxFileName = \"/home/helen/Documents/Projects/React/goit-react-hw-02-phonebook/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.heandleGoodFeedback = () => {\n      this.setState(prevState => ({\n        good: prevState.good + 1\n      }));\n      this.countTotalFeedback();\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.heandleNeutralFeedback = () => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1\n      }));\n      this.countTotalFeedback();\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.heandleBadFeedback = () => {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1\n      }));\n      this.countTotalFeedback();\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.countTotalFeedback = () => {\n      this.setState(prevState => ({\n        total: prevState.total + 1\n      }));\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      this.setState(state => {\n        return {\n          persentage: state.good * 100 / state.total\n        };\n      });\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad,\n      total,\n      persentage\n    } = this.state;\n    const persentageOfFeedback = Math.round(persentage);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/helen/Documents/Projects/React/goit-react-hw-02-phonebook/src/App.js"],"names":["React","Component","App","state","heandleGoodFeedback","setState","prevState","good","countTotalFeedback","countPositiveFeedbackPercentage","heandleNeutralFeedback","neutral","heandleBadFeedback","bad","total","persentage","render","persentageOfFeedback","Math","round"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,WAAP;;;AAGA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BE,KAF0B,GAElB,EAFkB;;AAAA,SAM1BC,mBAN0B,GAMJ,MAAM;AAC1B,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAC1BC,QAAAA,IAAI,EAAED,SAAS,CAACC,IAAV,GAAiB;AADG,OAAL,CAAvB;AAGA,WAAKC,kBAAL;AACA,WAAKC,+BAAL;AACD,KAZyB;;AAAA,SAc1BC,sBAd0B,GAcD,MAAM;AAC7B,WAAKL,QAAL,CAAcC,SAAS,KAAK;AAC1BK,QAAAA,OAAO,EAAEL,SAAS,CAACK,OAAV,GAAoB;AADH,OAAL,CAAvB;AAGA,WAAKH,kBAAL;AACA,WAAKC,+BAAL;AAED,KArByB;;AAAA,SAsB1BG,kBAtB0B,GAsBL,MAAM;AACzB,WAAKP,QAAL,CAAcC,SAAS,KAAK;AAC1BO,QAAAA,GAAG,EAAEP,SAAS,CAACO,GAAV,GAAgB;AADK,OAAL,CAAvB;AAGA,WAAKL,kBAAL;AACA,WAAKC,+BAAL;AAED,KA7ByB;;AAAA,SA+B1BD,kBA/B0B,GA+BL,MAAM;AACzB,WAAKH,QAAL,CAAcC,SAAS,KAAK;AAC1BQ,QAAAA,KAAK,EAAER,SAAS,CAACQ,KAAV,GAAkB;AADC,OAAL,CAAvB;AAGD,KAnCyB;;AAAA,SAqC1BL,+BArC0B,GAqCQ,MAAM;AACtC,WAAKJ,QAAL,CAAeF,KAAD,IAAW;AACvB,eAAO;AAAEY,UAAAA,UAAU,EAAEZ,KAAK,CAACI,IAAN,GAAa,GAAb,GAAmBJ,KAAK,CAACW;AAAvC,SAAP;AACD,OAFD;AAGD,KAzCyB;AAAA;;AA2C1BE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA,IAAF;AAAQI,MAAAA,OAAR;AAAiBE,MAAAA,GAAjB;AAAsBC,MAAAA,KAAtB;AAA6BC,MAAAA;AAA7B,QAA4C,KAAKZ,KAAvD;AACA,UAAMc,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAA7B;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AApDyB;;AAuD5B,eAAeb,GAAf","sourcesContent":["import React, { Component } from 'react'\n\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n\n  }\n\n  heandleGoodFeedback = () => {\n    this.setState(prevState => ({\n      good: prevState.good + 1,\n    }))\n    this.countTotalFeedback()\n    this.countPositiveFeedbackPercentage()\n  }\n\n  heandleNeutralFeedback = () => {\n    this.setState(prevState => ({\n      neutral: prevState.neutral + 1,\n    }))\n    this.countTotalFeedback()\n    this.countPositiveFeedbackPercentage()\n\n  }\n  heandleBadFeedback = () => {\n    this.setState(prevState => ({\n      bad: prevState.bad + 1,\n    }))\n    this.countTotalFeedback()\n    this.countPositiveFeedbackPercentage()\n\n  }\n\n  countTotalFeedback = () => {\n    this.setState(prevState => ({\n      total: prevState.total + 1\n    }))\n  }\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState((state) => {\n      return { persentage: state.good * 100 / state.total }\n    })\n  }\n\n  render() {\n    const { good, neutral, bad, total, persentage } = this.state;\n    const persentageOfFeedback = Math.round(persentage);\n\n    return (\n      <div className=\"App\">\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}