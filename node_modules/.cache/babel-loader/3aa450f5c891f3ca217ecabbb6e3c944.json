{"ast":null,"code":"var _jsxFileName = \"/home/helen/Documents/Projects/React/2hw/src/components/Statistics/Statistics.jsx\";\nimport React, { Component } from 'react';\nimport Feedback from './Feedback';\nimport Total from './Total';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Statistics extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n      total: this.good + this.neutral + this.bad,\n      persentage: 0\n    };\n\n    this.countTotalFeedback = (good, neutral, bad, total, persentage) => {\n      this.setState(prevState => ({\n        total: prevState.total + (good + bad + neutral)\n      })); // this.countPositiveFeedbackPercentage(good, total, persentage)\n    };\n\n    this.heandleGoodFeedback = ({\n      good,\n      neutral,\n      bad,\n      total\n    }) => {\n      console.log('this good', good);\n      this.setState(prevState => ({\n        good: prevState.good + 1\n      }));\n      this.countTotalFeedback(good, neutral, bad, total);\n    };\n\n    this.heandleNeutralFeedback = (good, neutral, bad, total) => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1\n      }));\n      this.countTotalFeedback(good, neutral, bad, total);\n    };\n\n    this.heandleBadFeedback = (good, neutral, bad, total) => {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1\n      }));\n      this.countTotalFeedback(good, neutral, bad, total);\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad,\n      total,\n      persentage\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Feedback, {\n        heandleGoodFeedback: () => {\n          this.heandleGoodFeedback({\n            good,\n            neutral,\n            bad,\n            total,\n            persentage\n          });\n        },\n        heandleBadFeedback: this.heandleBadFeedback({\n          good,\n          neutral,\n          bad,\n          total\n        }),\n        heandleNeutralFeedback: this.heandleNeutralFeedback({\n          good,\n          neutral,\n          bad,\n          total\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Total, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: total,\n        positiveFeedback: persentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/helen/Documents/Projects/React/2hw/src/components/Statistics/Statistics.jsx"],"names":["React","Component","Feedback","Total","Statistics","state","good","neutral","bad","total","persentage","countTotalFeedback","setState","prevState","heandleGoodFeedback","console","log","heandleNeutralFeedback","heandleBadFeedback","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Feedback from './Feedback'\nimport Total from './Total'\n\nclass Statistics extends Component {\n\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n        total: (this.good + this.neutral + this.bad),\n        persentage: 0\n    }\n\n    // countPositiveFeedbackPercentage = (num, per, persentage) => {\n    //     console.log(\"persent\", persentage)\n\n    //     this.setState(prevState => ({\n    //         persentage: (num * 100) / per\n    //     }))\n    // }\n\n    countTotalFeedback = (good, neutral, bad, total, persentage) => {\n        this.setState(prevState => ({\n            total: prevState.total + (good + bad + neutral)\n        }))\n        // this.countPositiveFeedbackPercentage(good, total, persentage)\n\n    }\n\n    heandleGoodFeedback = ({ good, neutral, bad, total }) => {\n        console.log('this good', good)\n        this.setState(prevState => ({\n            good: prevState.good + 1,\n        }))\n        this.countTotalFeedback(good, neutral, bad, total)\n    }\n\n    heandleNeutralFeedback = (good, neutral, bad, total) => {\n        this.setState(prevState => ({\n            neutral: prevState.neutral + 1,\n\n        }))\n        this.countTotalFeedback(good, neutral, bad, total)\n\n    }\n    heandleBadFeedback = (good, neutral, bad, total) => {\n        this.setState(prevState => ({\n            bad: prevState.bad + 1,\n\n        }))\n        this.countTotalFeedback(good, neutral, bad, total)\n\n    }\n\n\n\n\n\n    render() {\n        const { good, neutral, bad, total, persentage } = this.state;\n\n        return (\n            <>\n                <Feedback\n                    heandleGoodFeedback={() => { this.heandleGoodFeedback({ good, neutral, bad, total, persentage }) }}\n                    heandleBadFeedback={this.heandleBadFeedback({ good, neutral, bad, total })}\n                    heandleNeutralFeedback={this.heandleNeutralFeedback({ good, neutral, bad, total })}\n                />\n                <Total good={good} neutral={neutral} bad={bad} total={total} positiveFeedback={persentage} />\n            </>\n        )\n    }\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}